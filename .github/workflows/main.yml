name: CI
on: [push, pull_request]
jobs:
  run-hadolint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Run hadolint for Base testrunner debian bullseye
        uses: hadolint/hadolint-action@master
        with:
          dockerfile: base/debian/Dockerfile.bullseye
      - name: Run hadolint for Base testrunner debian bookworm
        uses: hadolint/hadolint-action@master
        with:
          dockerfile: base/debian/Dockerfile.bookworm
      - name: Run hadolint for Base testrunner ubuntu noble
        uses: hadolint/hadolint-action@master
        with:
          dockerfile: base/ubuntu/Dockerfile.noble
      - name: Run hadolint for Go
        uses: hadolint/hadolint-action@master
        with:
          dockerfile: go/Dockerfile
      - name: Run hadolint for Python
        uses: hadolint/hadolint-action@master
        with:
          dockerfile: python/Dockerfile
      - name: Run hadolint for Rust
        uses: hadolint/hadolint-action@master
        with:
          dockerfile: rust/Dockerfile

  check-changes:
    runs-on: ubuntu-latest
    outputs:
      debian_bookworm: ${{ steps.changes.outputs.debian_bookworm }}
      debian_bullseye: ${{ steps.changes.outputs.debian_bullseye }}
      ubuntu_noble: ${{ steps.changes.outputs.ubuntu_noble }}
      python: ${{ steps.changes.outputs.python }}
      go: ${{ steps.changes.outputs.go }}
      rust: ${{ steps.changes.outputs.rust }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            debian_bookworm:
              - 'base/debian/Dockerfile.bookworm'
            debian_bullseye:
              - 'base/debian/Dockerfile.bullseye'
            ubuntu_noble:
              - 'base/ubuntu/Dockerfile.noble'
            python:
              - 'python/Dockerfile'
              - 'base/Dockerfile.bookworm'
            go:
              - 'go/Dockerfile'
              - 'base/Dockerfile.bookworm'
            rust:
              - 'rust/Dockerfile'
              - 'base/Dockerfile.bookworm'

  build:
    # Run on all commits (PRs and main branch) to validate Dockerfiles can be built
    runs-on: ubuntu-latest
    needs: [run-hadolint, check-changes]

    strategy:
      matrix:
        include:
          - dockerfile: base/debian/Dockerfile.bookworm
            tag: debian_bookworm
            context: base
            should_build: ${{ needs.check-changes.outputs.debian_bookworm == 'true' }}
          - dockerfile: base/debian/Dockerfile.bullseye
            tag: debian_bullseye
            context: base
            should_build: ${{ needs.check-changes.outputs.debian_bullseye == 'true' }}
          - dockerfile: base/ubuntu/Dockerfile.noble
            tag: ubuntu_noble
            context: base
            should_build: ${{ needs.check-changes.outputs.ubuntu_noble == 'true' }}
          - dockerfile: python/Dockerfile
            tag: python
            context: python
            should_build: ${{ needs.check-changes.outputs.python == 'true' }}
          - dockerfile: go/Dockerfile
            tag: go
            context: go
            should_build: ${{ needs.check-changes.outputs.go == 'true' }}
          - dockerfile: rust/Dockerfile
            tag: rust
            context: rust
            should_build: ${{ needs.check-changes.outputs.rust == 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        if: matrix.should_build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: matrix.should_build

      - name: Build Docker image
        uses: docker/build-push-action@v5
        if: matrix.should_build
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: false
          tags: test-image:${{ matrix.tag }}
          build-args: ${{ matrix.build_args }}

  push:
    # Only run on push to main branch (PR merges) to push images to registry
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build, check-changes]

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - dockerfile: base/debian/Dockerfile.bookworm
            tag: debian-bookworm
            context: base
            should_build: ${{ needs.check-changes.outputs.debian_bookworm == 'true' }}
          - dockerfile: base/debian/Dockerfile.bullseye
            tag: debian-bullseye
            context: base
            should_build: ${{ needs.check-changes.outputs.debian_bullseye == 'true' }}
          - dockerfile: base/ubuntu/Dockerfile.noble
            tag: ubuntu-noble
            context: base
            should_build: ${{ needs.check-changes.outputs.ubuntu_noble == 'true' }}
          - dockerfile: python/Dockerfile
            tag: python
            context: python
            should_build: ${{ needs.check-changes.outputs.python == 'true' }}
          - dockerfile: go/Dockerfile
            tag: go
            context: go
            should_build: ${{ needs.check-changes.outputs.go == 'true' }}
          - dockerfile: rust/Dockerfile
            tag: rust
            context: rust
            should_build: ${{ needs.check-changes.outputs.rust == 'true' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        if: matrix.should_build

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        if: matrix.should_build
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        if: matrix.should_build
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/eiffel-community/etos-base-test-runner
          tags: |
            type=raw,value=${{ matrix.tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: matrix.should_build

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        if: matrix.should_build
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ matrix.build_args }}
